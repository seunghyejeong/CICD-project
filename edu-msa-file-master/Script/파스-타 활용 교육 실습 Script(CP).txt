* 파스-타 활용 교육 실습 스크립트(CP)

1) kubectl 다운로드 및 설치
* 컨테이너 플랫폼 포털 참고
	-> "Intro" > "Access" > "How to access" > "1. kubectl 다운로드 및 설치"
* kubectl on Window: https://kubernetes.io/docs/tasks/tools/install-kubectl-windows/

- 명령 프롬프트(CMD) 실행
	-> "우클릭" > "관리자 권한으로 실행"
$ curl -LO "https://dl.k8s.io/release/v1.23.0/bin/windows/amd64/kubectl.exe"
$ curl -LO "https://dl.k8s.io/v1.23.0/bin/windows/amd64/kubectl.exe.sha256"
$ CertUtil -hashfile kubectl.exe SHA256
$ type kubectl.exe.sha256

- Powershell 실행
	-> "우클릭" > "관리자 권한으로 실행"
> $($(CertUtil -hashfile .\kubectl.exe SHA256)[1] -replace " ", "") -eq $(type .\kubectl.exe.sha256)

- 명령 프롬프트(CMD) 실행
	-> "우클릭" > "관리자 권한으로 실행"
$ kubectl version --client


2) 환경 변수 설정 (For Windows)
* 컨테이너 플랫폼 포털 참고
	-> "Intro" > "Access" > "How to access" > "2. 환경 변수 설정"

* 명령 프롬프트(CMD) 실행
	-> "우클릭" > "관리자 권한으로 실행"
	-> "2) 환경 변수 설정"의 명령어 입력까지는 관리자 권한으로 실행

- 환경 변수 설정 (아래는 형식만 참고: "2. 환경 변수 설정"은 계정 마다 값이 다르므로 할당 받은 계정으로 로그인하여 "Intro" > "Access" > "How to access" > "2. 환경 변수 설정"에 제공된 명령어로 입력)  
$ set CAAS_SERVICE_CLUSTER_NAME="kubernetes"
$ set CAAS_SERVICE_CLUSTER_SERVER="https://45.248.73.50:6443"
$ set CAAS_SERVICE_USER_NAME="ca367311-9aed-4dec-a35e-c4f41a10b189-62"
$ set CAAS_SERVICE_CONTEXT_NAME="ca367311-9aed-4dec-a35e-c4f41a10b189-62-context"
$ set CAAS_SERVICE_NAMESPACE_NAME="paas-ca367311-9aed-4dec-a35e-c4f41a10b189-caas"
$ set CAAS_SERVICE_CREDENTIALS_TOKEN="eyJhbGciOiJSUzI1NiIsImtpZCI6IkFFSk5ENVMyVzZqeU1pMHhI…"

- Cluster 등록
	-> "Download cerificate file" 클릭
	-> [DOWNLOADED FILE PATH] 변수에 다운받은 path를 입력
$ kubectl config set-cluster %CAAS_SERVICE_CLUSTER_NAME% --embed-certs=true --server=%CAAS_SERVICE_CLUSTER_SERVER% --certificate-authority=[DOWNLOADED FILE PATH]
예) $ kubectl config set-cluster %CAAS_SERVICE_CLUSTER_NAME% --embed-certs=true --server=%CAAS_SERVICE_CLUSTER_SERVER% --certificate-authority=C:\kubectl-download\cluster-certificate.crt

- Credential 등록
$ kubectl config set-credentials %CAAS_SERVICE_USER_NAME% --token=%CAAS_SERVICE_CREDENTIALS_TOKEN%

- Context 설정
$ kubectl config set-context %CAAS_SERVICE_CONTEXT_NAME% --user=%CAAS_SERVICE_USER_NAME% --namespace=%CAAS_SERVICE_NAMESPACE_NAME% --cluster=%CAAS_SERVICE_CLUSTER_NAME%

- Context 사용 설정 
$ kubectl config use-context %CAAS_SERVICE_CONTEXT_NAME%

- Config 구성 확인
$ kubectl config view

- Resource 확인
$ kubectl get all


3) 파일 다운로드 (Github)
*Github 다운로드 링크 (https://github.com/PaaS-TA/edu-msa-file.git)
- https://github.com/PaaS-TA/edu-msa-file/archive/refs/heads/master.zip
- 다운로드 후 workspace에 해당 파일을 압축 해제


4) Redis 배포
- redis-msa-ui.yaml 파일 수정
	-> "[workspace 경로]/edu-msa-file-master/Kubernetes/redis-msa-ui.yaml" Editor로 파일 열기
	-> ${REDIS_MSA_UI}: "308xx"로 변수 수정(xx에 할당 받은 번호 입력)후 저장
================== redis-msa-ui.yaml ==================
apiVersion: v1
kind: Service
metadata:
  name: redis-msa-ui
  labels:
    app: redis
spec:
  ports:
  - nodePort: ${REDIS_MSA_UI} 
    port: 6379
    protocol: TCP
    targetPort: 6379
  selector:
    app: redis
  type: NodePort
================== redis-msa-ui.yaml ==================

- redis-msa-ui.yaml 실행
	-> CMD창 열어서 "[workspace 경로]/edu-msa-file-master/Kubernetes/" 위치로 이동
$ kubectl apply -f redis-msa-ui.yaml
$ kubectl get pods


5) DB 배포
5-1) board
- mysql-msa-board.yaml 파일 수정
	-> "[workspace 경로]/edu-msa-file-master/Kubernetes/mysql-msa-board.yaml" Editor로 파일 열기
	-> ${MYSQL_MSA_BOARD}: "305xx"로 변수 수정(xx에 할당 받은 번호 입력)후 저장
================== mysql-msa-board.yaml ==================
apiVersion: v1
kind: Service
metadata:
  name: mysql-msa-board
spec:
  type: NodePort
  ports:
  - port: 3306
    protocol: TCP
    targetPort: 3306
    nodePort: ${MYSQL_MSA_BOARD}
  selector:
    app: mysql-board
================== mysql-msa-board.yaml ==================

- mysql-msa-board.yaml 실행 
	-> CMD창 열어서 "[workspace 경로]/edu-msa-file-master/Kubernetes/" 위치로 이동
$ kubectl apply -f mysql-msa-board.yaml
$ kubectl get pods
	-> ${POD_NAME} 조회
$ kubectl get services
	-> 포트 번호 조회 
$ kubectl exec -it ${POD_NAME} /bin/bash 
	-> ${POD_NAME}: 조회한 pod 이름 입력
예) $ kubectl exec -it mysql-msa-board-8664f64ff8-vg8z7 /bin/bash 
# mysql -u root -p
Enter password: password
> CREATE DATABASE msa_board default CHARACTER SET UTF8;
> exit
# exit

- Database 연결(DBeaver 사용)
	- DBeaver 실행
	- 좌측 상단의 "새 데이터베이스 연결" 클릭
	- "MySql 선택" > "다음"
	- DB 정보 입력
		-> Server Host: ${KUBERNETES_URL}
		-> Database: msa_board
		-> Port: 305xx
		-> Username: root
		-> Password: password
	- "Test Connection" 혹은 "완료" 버튼 클릭 시 Driver 설치가 안되어 있는 경우 Driver 설치 창 출력됨, "Download" 버튼 클릭하여 Driver 설치
	- "Test Connetion" 버튼 클릭하여 정상적으로 MySql과 연결되는지 확인 후 "완료"
	- "윈도우" > "설정" 클릭
	- 환경설정에서 "일반" > "작업공간" > "텍스트 파일 인코딩" > "기타"에서 "UTF-8" 선택 > "Apply and Close"
	- 오른쪽 Script 창에서 "우클릭" > "파일" > "SQL 스크립트 불러오기"에서 "[workspace 경로]/edu-msa-file-master/DB/EDU_MAS_BOARD.sql"선택
	- "우클릭" > "실행" > "SQL 스크립트 실행" 클릭하여 샘플 데이터 입력


5-2) comment
- mysql-msa-comment.yaml 파일 수정
	-> "[workspace 경로]/edu-msa-file-master/Kubernetes/mysql-msa-board.yaml" Editor로 파일 열기
	-> ${MYSQL_MSA_COMMENT}: "306xx"로 변수 수정(xx에 할당 받은 번호 입력)후 저장
================== mysql-msa-comment.yaml ==================
apiVersion: v1
kind: Service
metadata:
  name: mysql-msa-comment
spec:
  type: NodePort
  ports:
  - port: 3306
    protocol: TCP
    targetPort: 3306
    nodePort: ${MYSQL_MSA_COMMENT}
  selector:
    app: mysql-comment
================== mysql-msa-comment.yaml ==================

- mysql-msa-comment.yaml 실행 
	-> CMD창 열어서 "[workspace 경로]/edu-msa-file-master/Kubernetes/" 위치로 이동
$ kubectl apply -f mysql-msa-comment.yaml
$ kubectl get pods
	-> ${POD_NAME} 조회
$ kubectl get services
	-> 포트 번호 조회 
$ kubectl exec -it ${POD_NAME} /bin/bash 
	-> ${POD_NAME}: 조회한 pod 이름 입력
예) $ kubectl exec -it mysql-msa-comment-69659f7cd6-lsspd /bin/bash 
# mysql -u root -p
Enter password: password
> CREATE DATABASE msa_comment default CHARACTER SET UTF8;
> exit
# exit

- Database 연결(DBeaver 사용)
	- DBeaver 실행
	- 좌측 상단의 "새 데이터베이스 연결" 클릭
	- "MySql 선택" > "다음"
	- DB 정보 입력
		-> Server Host: ${KUBERNETES_URL}
		-> Database: msa_comment
		-> Port: 306xx
		-> Username: root
		-> Password: password
	- "Test Connection" 혹은 "완료" 버튼 클릭 시 Driver 설치가 안되어 있는 경우 Driver 설치 창 출력됨, "Download" 버튼 클릭하여 Driver 설치
	- "Test Connetion" 버튼 클릭하여 정상적으로 MySql과 연결되는지 확인 후 "완료"
	- "윈도우" > "설정" 클릭
	- 환경설정에서 "일반" > "작업공간" > "텍스트 파일 인코딩" > "기타"에서 "UTF-8" 선택 > "Apply and Close"
	- 오른쪽 Script 창에서 "우클릭" > "파일" > "SQL 스크립트 불러오기"에서 "[workspace 경로]/edu-msa-file-master/DB/EDU_MAS_COMMENT.sql"선택
	- "우클릭" > "실행" > "SQL 스크립트 실행" 클릭하여 샘플 데이터 입력


5-3) user
- mysql-msa-user.yaml 파일 수정
	-> "[workspace 경로]/edu-msa-file-master/Kubernetes/mysql-msa-user.yaml" Editor로 파일 
	-> ${MYSQL_MSA_USER}: "307xx"로 변수 수정(xx에 할당 받은 번호 입력)후 저장
================== mysql-msa-user.yaml ==================
apiVersion: v1
kind: Service
metadata:
  name: mysql-msa-user
spec:
  type: NodePort
  ports:
  - port: 3306
    protocol: TCP
    targetPort: 3306
    nodePort: ${MYSQL_MSA_USER}
  selector:
    app: mysql-user
================== mysql-msa-user.yaml ==================

- mysql-msa-user.yaml 실행
	-> CMD창 열어서 "[workspace 경로]/edu-msa-file-master/Kubernetes/" 위치로 이동 
$ kubectl apply -f mysql-msa-user.yaml
$ kubectl get pods
	-> ${POD_NAME} 조회
$ kubectl get services
	-> 포트 번호 조회 
$ kubectl exec -it ${POD_NAME} /bin/bash 
	-> ${POD_NAME}: 조회한 pod 이름 입력
예) $ kubectl exec -it mysql-msa-user-db67976c5-n8l25 /bin/bash 
# mysql -u root -p
Enter password: password
> CREATE DATABASE msa_user default CHARACTER SET UTF8;
> exit
# exit

- Database 연결(DBeaver 사용)
	- DBeaver 실행
	- 좌측 상단의 "새 데이터베이스 연결" 클릭
	- "MySql 선택" > "다음"
	- DB 정보 입력
		-> Server Host: ${KUBERNETES_URL}
		-> Database: msa_user
		-> Port: 307xx
		-> Username: root
		-> Password: password
	- "Test Connection" 혹은 "완료" 버튼 클릭 시 Driver 설치가 안되어 있는 경우 Driver 설치 창 출력됨, "Download" 버튼 클릭하여 Driver 설치
	- "Test Connetion" 버튼 클릭하여 정상적으로 MySql과 연결되는지 확인 후 "완료”
	- "윈도우" > "설정" 클릭
	- 환경설정에서 "일반" > "작업공간" > "텍스트 파일 인코딩" > "기타"에서 "UTF-8" 선택 > "Apply and Close"
	- 오른쪽 Script 창에서 "우클릭" > "파일" > "SQL 스크립트 불러오기"에서 "[workspace"]/edu-msa-file-master/DB/EDU_MAS_USER.sql"선택
	- "우클릭" > "실행" > "SQL 스크립트 실행" 클릭하여 샘플 데이터 입력


6) war 파일 생성
* eGov 3.9 실행


6-1) edu-msa-board 설정 파일 수정
-  api.properties 파일 수정
	-> "src/main/resources/properties/api.properties" 파일 위치 열기
	-> ${NAMESPACE}: 컨테이터 플랫폼 포털 "Intro" > "Access"의 NAMESPACE_NAME 부분을 확인
	-> ${KUBERNETES_URL}: 컨테이터 플랫폼 포털 "Intro" > "Access"의 CLUSTER_SERVER 포트 앞부분 확인 	
	-> ${MYSQL_MSA_BOARD}: "305xx"로 변수 수정(xx에 할당 받은 번호 입력)후 저장
================== api.properties ==================
ApiEndpoint=http://edu-msa-zuul.${NAMESPACE}.svc.cluster.local:28081
ApiMasterKey=MSA-PaaS-TA
ApiKeySalt=PaaS-TA

# kubernetes datasource
dbms.username=root
dbms.password=password
dbms.url=${KUBERNETES_URL}
dbms.port=${MYSQL_MSA_BOARD}
dbms.name=msa_board
================== api.properties ==================
- war 파일 생성
	-> "edu-msa-board 프로젝트 선택" > "Run As" > "Maven build" 선택
	-> Edit Configuration 창에서 Goals에 "clean install" 입력 후 "Run" 실행
	-> "edu-msa-board/target" 위치에 edu-msa-board-1.0.0.war 파일 확인	


6-2) edu-msa-comment 설정 파일 수정
-  api.properties 파일 수정
	-> "src/main/resources/properties/api.properties" 파일 위치 열기
	-> ${NAMESPACE}: 컨테이터 플랫폼 포털 "Intro" > "Access"의 NAMESPACE_NAME 부분을 확인
	-> ${KUBERNETES_URL}: 컨테이터 플랫폼 포털 "Intro" > "Access"의 CLUSTER_SERVER 포트 앞부분 확인	
	-> ${MYSQL_MSA_COMMENT}: "306xx"로 변수 수정(xx에 할당 받은 번호 입력)후 저장
================== api.properties ==================
ApiEndpoint=http://edu-msa-zuul.${NAMESPACE}.svc.cluster.local:28081
ApiMasterKey=MSA-PaaS-TA
ApiKeySalt=PaaS-TA

# kubernetes datasource
dbms.username=root
dbms.password=password
dbms.url=${KUBERNETES_URL}
dbms.port=${MYSQL_MSA_COMMENT}
dbms.name=msa_comment
================== api.properties ==================
- war 파일 생성
	-> "edu-msa-comment 프로젝트 선택" > "Run As" > "Maven build" 선택
	-> Edit Configuration 창에서 Goals에 "clean install" 입력 후 "Run" 실행
	-> "edu-msa-comment/target" 위치에 edu-msa-comment-1.0.0.war 파일 확인	


6-3) edu-msa-user 설정 파일 수정
-  api.properties 파일 수정
	-> "src/main/resources/properties/api.properties" 파일 위치
	-> ${NAMESPACE}: 컨테이터 플랫폼 포털 "Intro" > "Access"의 NAMESPACE_NAME 부분을 확인
	-> ${KUBERNETES_URL}: 컨테이터 플랫폼 포털 "Intro" > "Access"의 CLUSTER_SERVER 포트 앞부분 확인	
	-> ${MYSQL_MSA_USER}: "307xx"로 변수 수정(xx에 할당 받은 번호 입력)후 저장	
================== api.properties ==================
ApiEndpoint=http://edu-msa-zuul.${NAMESPACE}.svc.cluster.local:28081
ApiMasterKey=MSA-PaaS-TA
ApiKeySalt=PaaS-TA

# kubernetes datasource
dbms.username=root
dbms.password=password
dbms.url=${KUBERNETES_URL}
dbms.port=${MYSQL_MSA_USER}
dbms.name=msa_user
================== api.properties ==================
- war 파일 생성
	-> "edu-msa-user 프로젝트 선택" > "Run As" > "Maven build" 선택
	-> Edit Configuration 창에서 Goals에 "clean install" 입력 후 "Run" 실행
	-> "edu-msa-user/target" 위치에 edu-msa-user-1.0.0.war 파일 확인	


6-4) edu-msa-ui 설정 파일 수정
-  api.properties 파일 수정
	-> "src/main/resources/properties/api.properties" 파일 위치
	-> ${NAMESPACE}: 컨테이터 플랫폼 포털 "Intro" > "Access"의 NAMESPACE_NAME 부분을 확인
	-> ${KUBERNETES_URL}: 컨테이터 플랫폼 포털 "Intro" > "Access"의 CLUSTER_SERVER 포트 앞부분 확인	
	-> ${REDIS_MSA_UI}: "308xx"로 변수 수정(xx에 할당 받은 번호 입력)후 저장	
================== api.properties ==================
ApiEndpoint=http://edu-msa-zuul.${NAMESPACE}.svc.cluster.local:28081
ApiMasterKey=MSA-PaaS-TA
ApiKeySalt=PaaS-TA

# kubernetes Redis Setting
redis.hostname=${KUBERNETES_URL}
redis.port=${REDIS_MSA_UI}
redis.password=password
================== api.properties ==================
- war 파일 생성
	-> "edu-msa-ui 프로젝트 선택" > "Run As" > "Maven build" 선택
	-> Edit Configuration 창에서 Goals에 "clean install" 입력 후 "Run" 실행
	-> "edu-msa-ui/target" 위치에 edu-msa-ui-1.0.0.war 파일 확인	


6-5) edu-msa-zuul 설정 파일 수정
-  설정 파일 수정
	-> 추후에 K8s yaml 파일에서 변수 적용을 하므로 수정 없이 바로 war 파일 생성
	
- war 파일 생성
	-> "edu-msa-zuul 프로젝트 선택" > "Run As" > "Maven build" 선택
	-> Edit Configuration 창에서 Goals에 "clean install" 입력 후 "Run" 실행
	-> "edu-msa-zuul/target" 위치에 edu-msa-zuul-1.0.0.war 파일 확인	


7) Docker Desktop 설치 
* Docker Desktop 다운로드: https://docs.docker.com/desktop/windows/install/
* Docker Desktop 설치 후 재부팅
* 설치 확인 
	-> CMD 창 실행
$ docker version 


8) Docker Image 생성 및 배포
- Insecure-registries 설정
	-> Docker Desktop을 실행시켜 "상단의 설정(Settings) 아이콘" > "Docker Engine" 클릭
	-> "insecure-registries": [ "${IMAGE_REGISTRY_URL}:5001" ] 추가 후 Apply & Restart 클릭
	예) "insecure-registries": [ "45.248.73.57:5001" ]
================== Docker Engine ==================
{
  "builder": {
    "gc": {
      "defaultKeepStorage": "20GB",
      "enabled": true
    }
  },
  "experimental": false,
  "features": {
    "buildkit": true
  },
  "insecure-registries": [
    "${IMAGE_REGISTRY_URL}:5001"
  ]
}
================== Docker Engine ==================

- 이미지 저장소 로그인 
	-> CMD 창 실행
$ docker login ${IMAGE_REGISTRY_URL}:5001 --username admin --password admin
예) $ docker login 45.248.73.57:5001 --username admin --password admin


8-1) edu-msa-board 도커 이미지 생성 및 배포
- 파일 구성
	-> 앞에서 생성한 edu-msa-board-1.0.0.war 파일을 "[workspace 경로]/edu-msa-file-master/Docker/edu-msa-board" 위치로 이동 
	-> edu-msa-board-1.0.0.war, Dockerfile, server.xml을 하나의 파일로 구성

- 도커 이미지 생성 및 배포
	-> CMD 창 실행한 후 "[workspace 경로]/edu-msa-file-master/Docker/edu-msa-board" 위치로 이동
# docker build --tag ${IMAGE_NAME}:latest .
# docker tag ${IMAGE_NAME} ${IMAGE_REGISTRY_URL}:5001/${DIRECTORY_NAME}/${IMAGE_NAME}
# docker push ${IMAGE_REGISTRY_URL}:5001/${DIRECTORY_NAME}/${IMAGE_NAME}

예)
$ docker build --tag edu-msa-board:latest .
$ docker tag edu-msa-board 45.248.73.57:5001/edu-msa-01/edu-msa-board
$ docker push 45.248.73.57:5001/edu-msa-01/edu-msa-board


8-2) edu-msa-comment 도커 이미지 생성 및 배포
- 파일 구성
	-> 앞에서 생성한 edu-msa-comment-1.0.0.war 파일을 "[workspace 경로]/edu-msa-file-master/Docker/edu-msa-comment" 위치로 이동 
	-> edu-msa-comment-1.0.0.war, Dockerfile, server.xml을 하나의 파일로 구성

- 도커 이미지 생성 및 배포
	-> CMD 창 실행한 후 "[workspace 경로]/edu-msa-file-master/Docker/edu-msa-comment" 위치로 이동
# docker build --tag ${IMAGE_NAME}:latest .
# docker tag ${IMAGE_NAME} ${IMAGE_REGISTRY_URL}:5001/${DIRECTORY_NAME}/${IMAGE_NAME}
# docker push ${IMAGE_REGISTRY_URL}:5001/${DIRECTORY_NAME}/${IMAGE_NAME}

예)
$ docker build --tag edu-msa-comment:latest .
$ docker tag edu-msa-comment 45.248.73.57:5001/edu-msa-01/edu-msa-comment
$ docker push 45.248.73.57:5001/edu-msa-01/edu-msa-comment


8-3) edu-msa-ui 도커 이미지 생성 및 배포
- 파일 구성
	-> 앞에서 생성한 edu-msa-ui-1.0.0.war 파일을 "[workspace 경로]/edu-msa-file-master/Docker/edu-msa-ui" 위치로 이동 
	-> edu-msa-ui-1.0.0.war, Dockerfile, server.xml을 하나의 파일로 구성

- 도커 이미지 생성 및 배포
	-> CMD 창 실행한 후 "[workspace 경로]/edu-msa-file-master/Docker/edu-msa-ui" 위치로 이동
# docker build --tag ${IMAGE_NAME}:latest .
# docker tag ${IMAGE_NAME} ${IMAGE_REGISTRY_URL}:5001/${DIRECTORY_NAME}/${IMAGE_NAME}
# docker push ${IMAGE_REGISTRY_URL}:5001/${DIRECTORY_NAME}/${IMAGE_NAME}

예)
$ docker build --tag edu-msa-ui:latest .
$ docker tag edu-msa-ui 45.248.73.57:5001/edu-msa-01/edu-msa-ui
$ docker push 45.248.73.57:5001/edu-msa-01/edu-msa-ui



8-4) edu-msa-user 도커 이미지 생성 및 배포
- 파일 구성
	-> 앞에서 생성한 edu-msa-user-1.0.0.war 파일을 "[workspace 경로]/edu-msa-file-master/Docker/edu-msa-user" 위치로 이동 
	-> edu-msa-user-1.0.0.war, Dockerfile, server.xml을 하나의 파일로 구성

- 도커 이미지 생성 및 배포
	-> CMD 창 실행한 후 "[workspace 경로]/edu-msa-file-master/Docker/edu-msa-user" 위치로 이동
# docker build --tag ${IMAGE_NAME}:latest .
# docker tag ${IMAGE_NAME} ${IMAGE_REGISTRY_URL}:5001/${DIRECTORY_NAME}/${IMAGE_NAME}
# docker push ${IMAGE_REGISTRY_URL}:5001/${DIRECTORY_NAME}/${IMAGE_NAME}

예)
$ docker build --tag edu-msa-user:latest .
$ docker tag edu-msa-user 45.248.73.57:5001/edu-msa-01/edu-msa-user
$ docker push 45.248.73.57:5001/edu-msa-01/edu-msa-user


8-5) edu-msa-zuul 도커 이미지 생성 및 배포
- 파일 구성
	-> 앞에서 생성한 edu-msa-zuul-1.0.0.war 파일을 "[workspace 경로]/edu-msa-file-master/Docker/edu-msa-zuul" 위치로 이동 
	-> edu-msa-zuul-1.0.0.war, Dockerfile, application.yml을 하나의 파일로 구성

- 도커 이미지 생성 및 배포
	-> CMD 창 실행한 후 "[workspace 경로]/edu-msa-file-master/Docker/edu-msa-zuul" 위치로 이동
# docker build --tag ${IMAGE_NAME}:latest .
# docker tag ${IMAGE_NAME} ${IMAGE_REGISTRY_URL}:5001/${DIRECTORY_NAME}/${IMAGE_NAME}
# docker push ${IMAGE_REGISTRY_URL}:5001/${DIRECTORY_NAME}/${IMAGE_NAME}

예)
$ docker build --tag edu-msa-zuul:latest .
$ docker tag edu-msa-zuul 45.248.73.57:5001/edu-msa-01/edu-msa-zuul
$ docker push 45.248.73.57:5001/edu-msa-01/edu-msa-zuul


9) K8s 배포
- Secret 생성
	-> CMD 창 실행
$ kubectl create secret docker-registry edu-msa-secret --docker-server=${IMAGE_REGISTRY_URL}:5001 --docker-username=admin --docker-password=admin 
예) $ kubectl create secret docker-registry edu-msa-secret --docker-server=45.248.73.57:5001 --docker-username=admin --docker-password=admin 


9-1) edu-msa-board API 배포
- edu-msa-board.yaml 파일 수정
	-> "[workspace 경로]/edu-msa-file-master/Kubernetes/edu-msa-board.yaml" Editor로 파일 열기
	-> ${IMAGE_REGISTRY_URL}:
	-> ${DIRECTORY_NAME}: 도커 이미지 태그시 입력한 파일 경로 입력
	-> ${IMAGE_NAME}: 도커 이미지 태그시 입력한 이미지 이름 입력
	-> ${EDU_MSA_BOARD}: "302xx"로 변수 수정(xx에 할당 받은 번호 입력)후 저장
================== edu-msa-board.yaml ==================
        image: ${IMAGE_REGISTRY_URL}:5001/${DIRECTORY_NAME}/${IMAGE_NAME}:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 28082         
      imagePullSecrets:
         - name: edu-msa-secret       
---
apiVersion: v1
kind: Service
metadata:
  name: edu-msa-board
  labels:
    app: board-msa  
spec:
  ports:
  - nodePort: ${EDU_MSA_BOARD}
    port: 28082
    protocol: TCP
    targetPort: 28082
  selector:
    app: board-msa
  type: NodePort
================== edu-msa-board.yaml ==================
- yaml 배포
	-> CMD 창 실행한 후 "[workspace 경로]/edu-msa-file-master/Kubernetes" 위치로 이동
$ kubectl apply -f edu-msa-board.yaml
$ kubectl get pods


9-2) edu-msa-comment API 배포
- edu-msa-comment.yaml 파일 수정
	-> "[workspace 경로]/edu-msa-file-master/Kubernetes/edu-msa-comment.yaml" Editor로 파일 열기
	-> ${IMAGE_REGISTRY_URL}:
	-> ${DIRECTORY_NAME}: 도커 이미지 태그시 입력한 파일 경로 입력
	-> ${IMAGE_NAME}: 도커 이미지 태그시 입력한 이미지 이름 입력
	-> ${EDU_MSA_COMMENT}: "303xx"로 변수 수정(xx에 할당 받은 번호 입력)후 저장
================== edu-msa-comment.yaml ==================
        image: ${IMAGE_REGISTRY_URL}:5001/${DIRECTORY_NAME}/${IMAGE_NAME}:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 28083    
      imagePullSecrets:
         - name: edu-msa-secret    
---
apiVersion: v1
kind: Service
metadata:
  name: edu-msa-comment
  labels:
    app: comment-msa  
spec:
  ports:
  - nodePort: ${EDU_MSA_COMMENT}
    port: 28083
    protocol: TCP
    targetPort: 28083
  selector:
    app: comment-msa
  type: NodePort
================== edu-msa-comment.yaml ==================
- yaml 배포
	-> CMD 창 실행한 후 "[workspace 경로]/edu-msa-file-master/Kubernetes" 위치로 이동
$ kubectl apply -f edu-msa-comment.yaml
$ kubectl get pods


9-3) edu-msa-ui API 배포
- edu-msa-ui.yaml 파일 수정
	-> "[workspace 경로]/edu-msa-file-master/Kubernetes/edu-msa-ui.yaml" Editor로 파일 열기
	-> ${IMAGE_REGISTRY_URL}:
	-> ${DIRECTORY_NAME}: 도커 이미지 태그시 입력한 파일 경로 입력
	-> ${IMAGE_NAME}: 도커 이미지 태그시 입력한 이미지 이름 입력
	-> ${EDU_MSA_UI}: "300xx"로 변수 수정(xx에 할당 받은 번호 입력)후 저장	
================== edu-msa-ui.yaml ==================
      image: ${IMAGE_REGISTRY_URL}:5001/${DIRECTORY_NAME}/${IMAGE_NAME}:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 28080     
      imagePullSecrets:
         - name: edu-msa-secret   
---
apiVersion: v1
kind: Service
metadata:
  name: edu-msa-ui
  labels:
    app: ui-msa  
spec:
  ports:
  - nodePort: ${EDU_MSA_UI}
    port: 28080
    protocol: TCP
    targetPort: 28080
  selector:
    app: ui-msa
  type: NodePort
================== edu-msa-ui.yaml ==================
- yaml 배포
	-> CMD 창 실행한 후 "[workspace 경로]/edu-msa-file-master/Kubernetes" 위치로 이동
$ kubectl apply -f edu-msa-ui.yaml
$ kubectl get pods


9-4) edu-msa-user API 배포
- edu-msa-user.yaml 파일 수정
	-> "[workspace 경로]/edu-msa-file-master/Kubernetes/edu-msa-user.yaml" Editor로 파일 열기
	-> ${IMAGE_REGISTRY_URL}:
	-> ${DIRECTORY_NAME}: 도커 이미지 태그시 입력한 파일 경로 입력
	-> ${IMAGE_NAME}: 도커 이미지 태그시 입력한 이미지 이름 입력
	-> ${EDU_MSA_USER}: "304xx"로 변수 수정(xx에 할당 받은 번호 입력)후 저장		
================== edu-msa-user.yaml ==================
        image: ${IMAGE_REGISTRY_URL}:5001/${DIRECTORY_NAME}/${IMAGE_NAME}:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 28084      
      imagePullSecrets:
         - name: edu-msa-secret     
---
apiVersion: v1
kind: Service
metadata:
  name: edu-msa-user
  labels:
    app: user-msa  
spec:
  ports:
  - nodePort: ${EDU_MSA_USER}
    port: 28084
    protocol: TCP
    targetPort: 28084
  selector:
    app: user-msa
  type: NodePort
================== edu-msa-user.yaml ==================
- yaml 배포
	-> CMD 창 실행한 후 "[workspace 경로]/edu-msa-file-master/Kubernetes" 위치로 이동
$ kubectl apply -f edu-msa-user.yaml
$ kubectl get pods


9-5) edu-msa-zuul API 배포
- edu-msa-zuul.yaml 파일 수정
	-> "[workspace 경로]/edu-msa-file-master/Kubernetes/edu-msa-zuul.yaml" Editor로 파일 열기
	-> ${IMAGE_REGISTRY_URL}:
	-> ${DIRECTORY_NAME}: 도커 이미지 태그시 입력한 파일 경로 입력
	-> ${IMAGE_NAME}: 도커 이미지 태그시 입력한 이미지 이름 입력
	-> ${EDU_MSA_ZUUL}: "301xx"로 변수 수정(xx에 할당 받은 번호 입력)후 저장		
================== edu-msa-zuul.yaml ==================
        image: ${IMAGE_REGISTRY_URL}:5001/${DIRECTORY_NAME}/${IMAGE_NAME}:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 28081      
        env:             
        - name: BOARD_MSA_URL
          value: "edu-msa-board.${NAMESPACE}.svc.cluster.local:28082"
        - name: COMMENT_MSA_URL
          value: "edu-msa-comment.${NAMESPACE}.svc.cluster.local:28083"
        - name: USER_MSA_URL
          value: "edu-msa-user.${NAMESPACE}.svc.cluster.local:28084"          
      imagePullSecrets:
         - name: edu-msa-secret   
---
apiVersion: v1
kind: Service
metadata:
  name: edu-msa-zuul
  labels:
    app: zuul-msa  
spec:
  ports:
  - nodePort: ${EDU_MSA_ZUUL}
    port: 28081
    protocol: TCP
    targetPort: 28081
  selector:
    app: zuul-msa
  type: NodePort
================== edu-msa-zuul.yaml ==================
- yaml 배포
	-> CMD 창 실행한 후 "[workspace 경로]/edu-msa-file-master/Kubernetes" 위치로 이동
$ kubectl apply -f edu-msa-zuul.yaml
$ kubectl get pods


10) MSA Application 포털 접속
- ${KUBERNETES_URL}: 컨테이터 플랫폼 포털 "Intro" > "Access"의 CLUSTER_SERVER 포트 앞부분 확인 	

- 쿠버네티스 edu-msa-ui service 조회
	-> CMD 창 실행
$ kubectl get services

- MSA Application URL
	-> http://${KUBERNETES_URL}:300xx/user/login
	-> 예) http://45.248.73.50:30001/user/login