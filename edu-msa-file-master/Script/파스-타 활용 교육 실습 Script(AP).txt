* 파스-타 활용 교육 실습 스크립트

1) 이클립스 설치(eGov : 3.9)
* eGov 개발환경 안내 
* eGov 다운로드 위치(Nextcloud) : https://nextcloud.paas-ta.org/index.php/s/NZWjASLTBizLK7J/download


2) 소스 다운로드 (Github)
* Github 다운로드 링크 (https://github.com/PaaS-TA?q=edu-msa)
- board : https://github.com/PaaS-TA/edu-msa-board/archive/refs/heads/master.zip
- user : https://github.com/PaaS-TA/edu-msa-user/archive/refs/heads/master.zip
- comment : https://github.com/PaaS-TA/edu-msa-comment/archive/refs/heads/master.zip
- zuul : https://github.com/PaaS-TA/edu-msa-zuul/archive/refs/heads/master.zip
- UI : https://github.com/PaaS-TA/edu-msa-ui/archive/refs/heads/master.zip
- 다운로드 후 workspace에 해당 파일들 압축 해제

3) Source Build 
- 이클립스에 소스 Import
	-> "Project Explorer" 화면에서 우클릭 > "Import" > "Import..." > "Existing Maven Projects" 선택 > Root Directory의 "Browse..." 클릭 > 프로젝트 폴더 위치 지정 > "Finish" 버튼 클릭
- maven을 이용한 build	(모든 프로젝트 진행 : Board, User, Comment, Zuul, UI)
	-> 프로젝트 "우클릭" > "Run As" > "Maven build" > "Goals"에 "clean install" 라고 입력하고 "Run" 버튼 클릭.
	-> 모든 프로젝트 이와 같이 진행.
	
	
3) Playpark 로그인 (CF CLI 다운로드)
-> CF CLI 설치 링크 : https://github.com/cloudfoundry/cli/blob/master/doc/installation-instructions/installation-instructions-v6.md#installers-and-compressed-binaries

- Login
$cf api api.paas-ta.org
$cf login -u "msa_trainer" -p "trainer"

	
4) 앱 / 서비스 배포 (Board, User, Comment 프로젝트만)
- manifest file 수정
	-> name과 host 부분 뒤에 "-실습_계정명" 추가.
=====
---
applications:
- name: edu-msa-board-{PaaS-TA계정명}
  memory: 1024M
  host: edu-msa-board-{PaaS-TA계정명}
  path: ./target/edu-msa-board-1.0.0.war
  buildpack: java_buildpack
env:
  JAVA_OPTS: -Djava.security.egd=file:///dev/urandom
=====
	
- 프로젝트 위치 확인 후 이동
	-> eclipse에서 프로젝트 "우클릭" > "Properties” > Location 확인 후 복사
	-> cmd 상에서 "cd {위에 복사한 프로젝트 위치}" 수행.
	
- cf push (Board, User, Comment 프로젝트만 진행)
$ cf push --no-start
	-> 추후 mariadb와 바인딩이 되지 않아서 --no-start 옵션이 없는 경우 에러 발생.
	

5) Data Insert (DBeaver 설치 포함)
* MariaDB Service 생성 및 확인

- Marketplace 조회
$ cf marketplace –s Mysql-DB

- Service 생성
$ cf create-service Mysql-DB Mysql-Plan1-10con {생성할_서비스명}
예) $ cf create-service Mysql-DB Mysql-Plan1-10con edu-board-db

- Service 바인딩 
$ cf bind-service {App명} {Service명}
예) $ cf bind-service edu-msa-board-trainer edu-board-db

- app start(Board, User, Comment 프로젝트만 수행)
$ cf start {App명}
예) $ cf start edu-msa-board-trainer

-환경 변수 확인
$ cf env {App명}
예) $ cf env edu-msa-board-trainer

- CF SSH 명령어로 Local Port와 Mariadb Port와 연결(env 정보 참고)
$ cf ssh –L {LocalPort}:{DB_IP}:{DB_PORT} edu-msa-board-trainer
예) $ cf ssh –L 9999:10.0.40.145:13307 edu-msa-board-trainer


* DBeaver 다운로드 
- https://dbeaver.io/download/
- DBeaver 설치

* Database 연결
- 좌측 상단의 "새 데이터베이스 연결" 클릭
- MariaDB 선택
- cf env 명령어로 통해 얻은 정보 입력(Database, Username, Password), Port의 경우 Local로 연결한 Port 번호 입력
- "Test Connection” 혹은 "완료” 버튼 클릭 시 Driver 설치가 안되어 있는 경우 이와 같이 Driver 설치 창 출력됨. "Download” 버튼 클릭하여 Driver 설치.
- "Test Connetion” 버튼 클릭하여 정상적으로 Mariadb와 연결되는지 확인 후 "완료”
- 윈도우 > 설정 클릭
- 일반 > 작업공간 > 텍스트 파일 인코딩 > "기타"에서 "UTF-8” 선택
- 샘플 SQL 다운로드 링크 : https://github.com/PaaS-TA/edu-msa-file/archive/refs/heads/master.zip
	-> 해당 파일에 Script, SQL, Docker, K8s 파일 존재.
- "EDU_MAS_{API명}.sql” 열고 "우클릭 > 실행 > SQL 스크립트 실행" 클릭하여 샘플 데이터 입력



	
6) 포스트맨 설치 및 API 호출(REST full API 테스트 진행)	
- POSTMAN 다운로드
	-> URL : https://www.postman.com/downloads/
	

- ZUUL 배포
	-> 배포 과정 동일.

- Zuul Gateway의 application.yml 파일 수정
	-> url의 각 api의 URL 입력 필요.
================== application.yml ==================
zuul:
  retryable: true
  routes:
    user:
      path: /user/**
      url: http://{User API URL}/user
    board:
      path: /board/**
      url: http://{Board API URL}/board
    comments:
      path: /comments/**
      url: http://{Comment API URL}/comments
================== application.yml ==================

- API 테스트
* GET
Method : GET
URI : https://{Zuul Gateway URL}/board
Key : apiKey
Value : MSA-PaaS-TA

* POST 
Method : POST
URI : https://{Zuul Gateway URL}/board
Raw : {"boardText":"게시판 내용_테스트","boardTitle":"게시판 제목_테스트","writeUserId":"test","writeUserName":"홍길동"}

* PUT 
Method : PUT
URI : https://{Zuul Gateway URL}/board/{boardSeq}
Raw : {"boardText": "게시판 제목_테스트_1","boardTitle": "게시판 제목_테스트_1","writeUserId": "test"}

* DELETE
Method : DELETE
URI : https://{Zuul Gateway URL}/board/{boardSeq}/{writeUserId}


7) REDIS 서비스 생성 및 연결 / UI APP 배포
- REDIS Service 생성
$ cf create-service {Service명} {Service Plan} {생성할_Service명}
예) $ cf create-service redis dedicated-vm edu-msa-redis-trainer

- UI 배포
	- api.properties 수정
	-> ApiEdnpoint를 Zuul Gateway URL로 변경
		예) ApiEndpoint=https://edu-msa-zuul-{PaaS-TA계정명}.paas-ta.org
	- UI 프로젝트 maven build 실행
	- cmd 상에서 프로젝트 위치로 이동 "cd {UI프로젝트위치}"
	$ cf push --no-start 
	
- Redis 연결
$ cf bind-service {애플리케이션명} {서비스명}
예) $ cf bind-service edu-msa-ui-trainer edu-msa-redis-trainer
	
- UI 프로젝트 시작
$ cf start {애플리케이션명}
예) $ cf start edu-msa-ui-trainer
	
- UI 화면 확인
	URL : https://{PaaS-TA 계정명}/board
	
8) CI/CD 구성
- PaaS-TA 대시보드 로그인
	URL : https://paas-ta.org
	
- SCM, 형상관리 Service 생성
	- 상단의 "카탈로그" 클릭
	- 서비스 리스트에서 "형상관리" 클릭
	- 서비스 이름 입력 후 "생성" 버튼 클릭
	
- Repository 생성
	- "대시보드” 화면의 "서비스"탭에서 SCM 서비스의 "대시보드"버튼 클릭
	- SCM에서 사용할 비밀번호 입력 후 "확인" 버튼 클릭
	- 레파지토리를 생성하기 위해 "신규생성” 버튼 클릭
	- "레파지토리 명" 입력 후 "유형"을 "Git”으로 선택하고 "생성” 버튼 클릭
	- 생성된 레파지토리 클릭하여 상세 페이지로 이동
	- 생성한 레파지토리의 주소를 복사

- Repository 연결
	- Eclipse의 프로젝트를 우클릭 > "Team" > "Shared Project..." 클릭
	- "Git" 선택 후 "Next" > "Use or create repository in parent folder of project" 체크 > "Create Repository” 클릭하여 Local Repository 생성 > 현재 프로젝트 체크 > "Finsh” 버튼 클릭
	- 프로젝트 우클릭 > Team > Commit
	- Unstages Changes 리스트 전체 선택 > "+” 기호 클릭 > "Commit Message” 입력 > "Commit” 버튼 클릭
	- 프로젝트 우클릭 > Team > Remote > Push 클릭 > URI에 복사한 레파지토리 주소를 붙여 넣고, 나머지 정보들 입력 > "Srouce ref”를 master 선택 후 "Add Spec” 클릭 후 "Finish” 클릭

- 파이프라인 Service 생성
	- "카탈로그” 화면의 "서비스” 부분에서 "파이프라인" 클릭.
	- "서비스 이름” 입력 후 "생성"버튼 클릭

- 파이프라인 구성(build Job)
	- "대시보드” 화면의 "서비스" 탭에서 생성한 파이프라인의 "대시보드" 클릭
	- "신규생성” 버튼 클릭
	- "파이프라인 명" 작성 후 "생성"버튼 클릭
	- 생성한 파이프라인 페이지에서 "새 작업 그룹 추가" 버튼 클릭 후 아래 내용 입력
		"내 작업" : "빌드 job" 입력
		"작업 유형(Job)" : "빌드 (build)” 선택
		"빌더유형(Type)" : "Maven” 선택
		"입력 유형" : "SCM (Git)" 선택 후 계정정보와 레파지토리 URI 입력 후 조회 버튼 클릭 하여 브런치 선택
		"작업 트리거" "변경사항을 푸시 할 때마다 작업 실행" 선택 후 "저장” 클릭

- Cloud Foundry 정보 등록
	- “파이프라인 관리“ > “Cloud Foundry 정보관리“ 클릭 
	- 우측 상단의 “Cloud Foundry 계정 등록“ 버튼 클릭
	- 사용할 계정명과 PaaS-TA의 아이디, 비밀번호를 입력 후 “URL 관리“를 클릭
	- “URL 등록“ 버튼 클릭 > PaaS-TA의 API 명과 URL 작성 후 "URL 저장“ 클릭
	- “URL” 선택 후 ＂등록“ 버튼 클릭

- 파이프라인 구성(배포 Job) 
	- 배포파이프 라인 화면에서 빌드 job 부분의 “추가” 버튼 클릭하여 신규 작업 등록화면으로 이동 후 아래 사항 입력 
		“내 작업“ : “배포 job“ 입력
		“작업 유형(Job)“ : “배포(Deploy)” 선택
		＂유형 (Type)“ : “개발배포” 선택
		“Cloud Foundry 정보” : “생성한 Cloud Foundry 정보“ 선택
		“조직명” : 현재 사용중인 조직명 선택
		“App 명” : 배포할 App명 입력
		“MANIFEST 사용 여부“ : “N” 선택
		“입력 유형“ “1. 빌드 job“ 선택
		“작업 트리거“ “이전 작업을 완료할 때 작업 실행“ 선택

- CI/CD 구성 테스트
	- 이클립스의 프로젝트 우클릭 > “New” > “Class” 클릭 > Name “Test” 입력 후 “Finish” 버튼 클릭
	- “Unstaged Changes” 모든 목록 선택 “+” 클릭 > “Commit Message” 입력 > “Commit and Push” 버튼 클릭 > URI의 레파지토리 URI 입력 후 “Next” 클릭 > “Next” 클릭 후 “Finish” 클릭


















